//Switch statement
You can only switch on an expression of a type that can be statically evaluated,
which restricts it to the built-in integral types, bool, and enum types (and nullable
versions of these), and string type.

//boxing and unboxing 
boxing is the act of coverting a value type instance to a reference type instance i.e object type or interface type 
unboxing is the act of casting the object type to value type . Unboxing requires expliciit and exact casting i.e the follwoing will trhow error 
object obj =9;
long lng= (long)obj;
rather it should be written like this long lng= (long)(int)obj; so the unboxing here is done by the (int) castint i.e the exact type casting 

//Delegate Vs Interface
What can be acheived by delegate can also be done by interface, So when to choose delegate over interface(if one or more of below is met)
>when the interface has only one method
>When multicast capability is needed
>the subscriber need to implement the interface multiple times

//Equality of delegate instances 
>two delegate are said to be equal if they have the same method targets
>tow mulitacast delegate instances are equal if they have they have the same method targets and in the same order

//Creating events as per windows standards
>create a class that subclasses the EventArgs class. This subclass captures the information (in the form of properties or fields) needed to pass on after event is fired.
>in the broadcaster class create an event of the EventHandler<object o, TEventArgs e> delegate . Here o is the broadcaster class and e is the above mentioned subclass instance
>In the broadcaster class create a protected virtual method having a single parameter of above mentioned subclass type . This method name should be the same as above event name but  prefixed with 'On' 
>call the above virtual method to fire the event .
>the event is to fired like eventName?.invoke(this,subclass event args instance)

Lambda expression
>Lambda expression are unnamed methods that are written in place of delegate instance
The compliler immedietly converts lambda expression to one of the following
>delegate instance 
>expression tree(representing the code inside the lambda expression as traversable object model.This allows the lambda expression to be interpretaed later at run time)
>a lambda expression has the following form : (parameters) => expression or statement block
>lambda expression can capture variable outside of the lambda expression such lambda expressions are called closures . The lifetime of such outer variable is till the time the  delegate that is referring that lambda expression is live.

Finally block
> The only thing that can defeat a finally block is an infinite loop or the process ending abruptly.

